/*************************************************************************
 * Copyright (c) 2012 Federal University of Minas Gerais - UFMG 
 * All rights avaiable. This program and the accompanying materials
 * are made avaiable under the terms of the Eclipse Public Lincense v1.0
 * which accompanies this distribution, and is avaiable at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *   Alcemir R. Santos - improvements on the ConcernMapper
 * 			architeture. ConcernMapper is available at
 * 			http://www.cs.mcgill.ca/~martin/cm/
 *************************************************************************/
package br.ufmg.dcc.t2fm.model.io;

import java.io.File;
import java.io.IOException;
import java.io.PrintStream;

import org.eclipse.jface.viewers.ISelection;
import org.eclipse.jface.viewers.IStructuredSelection;

import br.ufmg.dcc.t2fm.actions.RenameConcernAction;
import br.ufmg.dcc.t2fm.model.ConcernModel;
import br.ufmg.dcc.t2fm.views.components.ConcernNode;
import br.ufmg.dcc.t2fm.views.components.JavaElementNode;

/**
 * @author Alcemir R. Santos
 * 
 */
public class JavaFileWriter {

	public static final String lineSeparator = System
			.getProperty("line.separator");

	// The class of the main JUnit suite, and the prefix of the subsuite names.
	public String className;

	// The package name of the main JUnit suite
	public String packageName;

	// The directory where the JUnit files should be written to.
	private String dirName;

	// The model to wrote in the JavaFile
	private ConcernModel concernModel;

	/**
	 * Constructor of the Java file writer.
	 * 
	 * @param dirName
	 * @param packageName
	 * @param className
	 * @param model
	 */
	public JavaFileWriter(String dirName, String packageName,
			String className, ConcernModel model) {
		this.dirName = dirName;
		this.packageName = packageName;
		this.className = className;
		this.concernModel = model;
	}

	/**
	 * Writes the Java file.
	 * @param iSelection 
	 * 
	 * @param model
	 * 
	 * @return
	 */
	public File write(ISelection iSelection) {

		File file = new File(getDir(), className + ".java");
		PrintStream out = createTextOutputStream(file);

		String comment = 
				"/**************************************************************************\n"+
				" * Copyright (c) 2012 Federal University of Minas Gerais - UFMG           *\n"+
				" * All rights avaiable. This program and the accompanying materials       *\n"+
				" * are made avaiable under the terms of the Eclipse Public Lincense v1.0  *\n"+
				" * which accompanies this distribution, and is avaiable at                *\n"+
				" * http://www.eclipse.org/legal/epl-v10.html                              *\n"+
				" *                                                                        *\n"+
				" * Contributors:                                                          *\n"+
				" *   Alcemir R. Santos - improvements on the ConcernMapper                *\n"+
				" * 			architeture. ConcernMapper is available at                 *\n"+
				" * 			http://www.cs.mcgill.ca/~martin/cm/                        *\n"+
				" **************************************************************************/";
		try {
			out.println(comment);
			outputPackageName(out, packageName);
			out.println();
			out.println("import org.junit.runner.RunWith;");
			out.println("import org.junit.runners.Suite;");
			out.println("import org.junit.runners.Suite.SuiteClasses;");
			out.println();
			out.println( getImportsClassesFromModel() );
			out.println();
			comment = 
					"/** \n"+
					" * Test Suite class automatically generated by Test2FeatureMapper.\n"+
					" * \n"+
					" * @author Alcemir R. Santos \n"+
					" */ ";
			out.println(comment);
			out.println("@RunWith(Suite.class)");
			out.println("@SuiteClasses({");
			out.println( getClassesFromModel(iSelection));
			out.println("})");
			out.println("public class " + className + "{");
			out.println();
			out.println("}");
		} finally {
			if (out != null)
				out.close();
		}

		return file;
	}

	/**
	 * Returns the classes to add to the suite class.
	 * @param iSelection
	 * @return
	 */
	private String getClassesFromModel(ISelection iSelection) {
		String classes="";
		IStructuredSelection lStructuredSelection=null;
		if( iSelection instanceof IStructuredSelection ){
			lStructuredSelection = (IStructuredSelection) iSelection;
		}
		Object lNext = lStructuredSelection.getFirstElement();
		ConcernNode cn = (ConcernNode) lNext;
		Object[] objects = cn.getChildren();
		int count = 0;
		for (Object object : objects) {
			if( object instanceof JavaElementNode){
				JavaElementNode jen = (JavaElementNode) object;
				classes += jen.getElement().getElementName()+".class";
			}
			if (++count == objects.length) {
				break;
			}else 
				classes += ",\n";
		}
		return classes;
	}

	/**
	 * Returns the imports necessary to the suite class.
	 * @param model
	 * @return
	 */
	private String getImportsClassesFromModel() {
		String imports="";
		IStructuredSelection lStructuredSelection=null;
		if( iSelection instanceof IStructuredSelection ){
			lStructuredSelection = (IStructuredSelection) iSelection;
		}
		Object lNext = lStructuredSelection.getFirstElement();
		ConcernNode cn = (ConcernNode) lNext;
		Object[] objects = cn.getChildren();
		int count = 0;
		for (Object object : objects) {
			if( object instanceof JavaElementNode){
				JavaElementNode jen = (JavaElementNode) object;
				imports += jen.getElement().getElementName()+".class";
			}
			if (++count == objects.length) {
				break;
			}else 
				imports += ",\n";
		}
		return imports;
	}

	/**
	 * Append identation to the code string.
	 * 
	 * @param codeString
	 * @return
	 */
	public static String indent(String codeString) {
		StringBuilder indented = new StringBuilder();
		String[] lines = codeString.split(lineSeparator);
		for (String line : lines) {
			indented.append("    " + line + lineSeparator);
		}
		return indented.toString();
	}

	/**
	 * It tests if is default package to return the right package.
	 * 
	 * @param out
	 * @param packageName
	 */
	private static void outputPackageName(PrintStream out, String packageName) {
		boolean isDefaultPackage = packageName.length() == 0;
		if (!isDefaultPackage)
			out.println("package " + packageName + ";");
	}

	/**
	 * Build the path to the file.
	 * 
	 * @return File, with its path.
	 */
	public File getDir() {
		File dir = null;

		if (dirName == null || dirName.length() == 0)
			dir = new File(System.getProperty("user.dir"));
		else
			dir = new File(dirName);

		if (packageName == null)
			return dir;

		packageName = packageName.trim(); // Just in case.

		if (packageName.length() == 0)
			return dir;

		String[] split = packageName.split("\\.");
		for (String s : split) {
			dir = new File(dir, s);
		}
		return dir;
	}

	/**
	 * Create a output stream to write to the file.
	 * 
	 * @param file
	 * @return
	 */
	private static PrintStream createTextOutputStream(File file) {
		try {
			return new PrintStream(file);
		} catch (IOException e) {
			e.printStackTrace();
			System.exit(1);
			throw new Error("This can't happen");
		}
	}
	/**
	 *
	 */
}
